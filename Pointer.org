#+TITLE: Pointer Cheat Sheet
#+AUTHOR: Maximilian Groetsch
#+STARTUP: showeverything

* Pointer Basics
+ Syntax
+ Adresse auslesen
+ Werte mit Pointern manipulieren

#+begin_src C :tangle basicPointer.c
#include <stdio.h>

int main(void)
{
    //Variabel initialisiern
    int x = 0;
    printf("%d %s", x , "\n");
    //Adresse auslesen
    int *pointer;
    pointer = &x;
    printf("%i %s", pointer, "\n");
    //Werte mit Pointern manipulieren
    *pointer = 1;
    printf("%d %s", x, "\n");

}

#+end_src

#+RESULTS:
|         0 |
| 477380140 |
|         1 |

* Mit Pointer auf Arrays zugreifen

#+begin_src C :tangle arrayIteration.c
#include <stdio.h>

int main(void)
{
    int arr1[11] = {1,2,3,4,5,6,7,8,9,10,0};
    int arr2[11] = {10,-30,29,-28,27,-26,25,-24,23,-22,21};

    int *ptr;
    ptr = arr1;
    while(*ptr) //solange der Pointer-Wert > 0
    {
        printf("%i ", *ptr);
        ptr++;
    }

    //**********************************************
    printf("\n");
    //**********************************************

    int idx = 0;
    ptr = arr2;
    int len = *ptr;
    ptr++;
    while(idx < len)
    {
       printf("%i ", *ptr);
       ptr++;
       idx++;
    }

    //**********************************************
    printf("\n");
    //**********************************************

    for(ptr = &arr1[0]; *ptr > 0; ptr++)
    {
        printf("%i ", *ptr);
    }

    //**********************************************
    printf("\n");
    //**********************************************

    ptr = &arr2[1];
    for(idx = 0;idx < arr2[0]; idx++)
    {
        printf("%i ", *ptr);
        ptr++;
    }

}
#+end_src

#+RESULTS:
|   1 |  2 |   3 |  4 |   5 |  6 |   7 |  8 |   9 | 10 |
| -30 | 29 | -28 | 27 | -26 | 25 | -24 | 23 | -22 | 21 |
|   1 |  2 |   3 |  4 |   5 |  6 |   7 |  8 |   9 | 10 |
| -30 | 29 | -28 | 27 | -26 | 25 | -24 | 23 | -22 | 21 |

* Arrays, Pointer und Funktionen
#+begin_src C :tangle functionXarray.c
#include <stdio.h>

static void foo(const int *arr)
{
    int *ptr;
    ptr = arr;
    while(*ptr)
    {
        printf("%i ", *ptr);
        ptr++;

    }
}

int main(void)
{
    int arr[6] = {1,2,3,4,5,0};
    foo(arr);
}
#+end_src

#+RESULTS:
: 1 2 3 4 5

* Zwei Arrays mergen
#+begin_src C :tangle mergeArrs.c
#include <stdio.h>

static int* merge(const int *arr1, const int *arr2);
static void  printArray(const int *res);

int main(void)
{
    int array1[9] = {2,3,4,6,8,10,11,12,0};
    int array2[9] = {3,4,5,7,8,9,11,13,0};
    int result[20];

    result = merge(array1, array2);

    printArray(result);

}

static int* merge(const int *arr1, const int *arr2)
{
    int tmp[20];
    int *ptr1;
    int *ptr2;
    int *resPtr;

    ptr1 = arr1;
    ptr2 = arr2;
    resPtr = tmp;

    while(true)
    {
        if(*ptr1 < *ptr2) {
            *resPtr = *ptr1;
            resPtr++;
            ptr1++;
        }

        if(*ptr1 > *ptr2) {
            *resPtr = *ptr2;
            resPtr++;
            ptr2++;
        }

        if(*ptr1 == *ptr2) {
            ptr1++;
            ptr2++;
        }

        while(*ptr1 == 0 && *ptr2){
            if(!*ptr2){
                break;
            }

            ,*tmp = *ptr2;
            tmp++;
            ptr2++;

        }

        while(*ptr1 && *ptr2 == 0){
            if(!ptr1){
                break;
            }

            ,*tmp = *ptr1;
            tmp++;
            ptr1++;
        }


    }

    return tmp;
}

static void printArray(const int *res)
{
    int *ptr = res;
    ptr = res;
    while(*ptr)
    {
        printf("%i ", *ptr);
        ptr++;
    }
}
#+end_src

#+RESULTS:
