#+TITLE: Pointer Cheat Sheet
#+AUTHOR: Maximilian Groetsch
#+STARTUP: showeverything

* Pointer Basics
+ Syntax
+ Adresse auslesen
+ Werte mit Pointern manipulieren

#+begin_src C :tangle basicPointer.c
#include <stdio.h>

int main(void)
{
    //Variabel initialisiern
    int x = 0;
    printf("%d %s", x , "\n");
    //Adresse auslesen
    int *pointer;
    pointer = &x;
    printf("%i %s", pointer, "\n");
    //Werte mit Pointern manipulieren
    *pointer = 1;
    printf("%d %s", x, "\n");

}

#+end_src

#+RESULTS:
|      0 |
| -13356 |
|      1 |

* Mit Pointer auf Arrays zugreifen

#+begin_src C :tangle arrayIteration.c
#include <stdio.h>

int main(void)
{
    int arr1[11] = {1,2,3,4,5,6,7,8,9,10,0};
    int arr2[11] = {10,-30,29,-28,27,-26,25,-24,23,-22,21};

    int *ptr;
    ptr = arr1;
    while(*ptr) //solange der Pointer-Wert > 0
    {
        printf("%i ", *ptr);
        ptr++;
    }

    //**********************************************
    printf("\n");
    //**********************************************

    int idx = 0;
    ptr = arr2;
    int len = *ptr;
    ptr++;
    while(idx < len)
    {
       printf("%i ", *ptr);
       ptr++;
       idx++;
    }

    //**********************************************
    printf("\n");
    //**********************************************

    for(ptr = &arr1[0]; *ptr > 0; ptr++)
    {
        printf("%i ", *ptr);
    }

    //**********************************************
    printf("\n");
    //**********************************************

    ptr = &arr2[1];
    for(idx = 0;idx < arr2[0]; idx++)
    {
        printf("%i ", *ptr);
        ptr++;
    }

}
#+end_src

#+RESULTS:
|   1 |  2 |   3 |  4 |   5 |  6 |   7 |  8 |   9 | 10 |
| -30 | 29 | -28 | 27 | -26 | 25 | -24 | 23 | -22 | 21 |
|   1 |  2 |   3 |  4 |   5 |  6 |   7 |  8 |   9 | 10 |
| -30 | 29 | -28 | 27 | -26 | 25 | -24 | 23 | -22 | 21 |

* Arrays, Pointer und Funktionen
#+begin_src C :tangle functionXarray.c
#include <stdio.h>

static void foo(const int *arr)
{
    int *ptr;
    ptr = arr;
    while(*ptr)
    {
        printf("%i ", *ptr);
        ptr++;

    }
}

int main(void)
{
    int arr[6] = {1,2,3,4,5,0};
    foo(arr);
}
#+end_src

#+RESULTS:
: 1 2 3 4 5

* Zwei Arrays mergen
#+begin_src C :tangle mergeArrs.c
#include <stdio.h>

static void merge(int *arr1, const int *arr2, int *result);
static int compareTo(int a, int b);
static void printArray(const int *res);

int main(void)
{
    int array1[9] = {2, 3, 4, 6, 8, 10, 11, 12, 0};
    int array2[9] = {3, 4, 5, 7, 8, 9, 11, 13, 0};
    int result[17];

    merge(array1, array2, result);

    printArray(result);
}

static void merge(int *arr1, const int *arr2, int *result)
{
    int i = 0;
    int decide, j, k;

    j = 0, k = 0;
    for (i = 0; i < 13; i++)
    {
        decide = compareTo(arr1[j], arr2[k]);
        if (decide <= 0)
        {
            result[i] = arr1[j++];
            if (decide == 0)
                k++;
        }
        else
        {
            result[i] = arr2[k++];
        }
    }
}

static int compareTo(int a, int b)
{
    if (a == b)
    {
        return 0;
    }

    if (a < b)
    {
        return -1;
    }

    if (a > b)
    {
        return 1;
    }
}

static void printArray(const int *res)
{
    while (*res)
    {
        printf("%i ", *res);
        res++;
    }
}
#+end_src

#+RESULTS:
: 2 3 4 5 6 7 8 9 10 11 12
